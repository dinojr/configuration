;;~/.emacs -*- mode: lisp-*-

(setq inhibit-startup-screen t)
(global-font-lock-mode)

(add-to-list 'load-path "~/configuration/elisp/")

(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))

(require 'use-package-ensure)
(setq use-package-always-ensure t)
;; Using quelpa:
(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))
(use-package quelpa
    :ensure quelpa-use-package)

(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)


(load "JCpackages.el")

;; Custom file
(load "~/.emacs.d/emacs-custom.el")

(load "JCgpg.el")
(load "JCkeychain.el")
(load "JCflycheck.el")
(load "JClpr.el")
(load "JCnavigation.el")
(load "JCparenthesis.el")
(load "JCwindows.el")
(load "JCspellcheck.el")
(load "JCtramp.el")
(load "JCanzu.el") ; Ã  charger *avant* spaceline
;; (load "JCido.el")
;; (load "JCcompany.el")
(setq org-clock-x11idle-program-name "jc-idle-time")
(load "JCpdftools.el")
(load "JCorg.el")
;; (load "JCminions-moody.el")
(use-package minions
  :ensure t
  :init (minions-mode)
  :config
  (setq
   minions-mode-line-lighter "#"
   minions-direct '(flycheck-mode
		    ;; mingus-mode-line-objet
		    )))
(load "JCmodeline.el")
;; (load "JCspaceline.el")
(load "JCdired.el")
(load "JCyasnippet.el")
;; (load "JCdiary.el")
(load "JCcalendrier.el")
(load "JCregexps.el")
(setq org-export-async-init-file "/home/wilk/configuration/elisp/org-export-async-init.el")
;; (load "JCorg-google.el")
(load "JCcalfw.el")
(load "JCorgcaldav.el")
(load "JClatex.el")
(load "JCConTeXt.el")
(load "JCbibliography.el")
(load "JCgit.el")
;; (load "JCediff.el")
;; (load "JCbitlbee.el")
(load "JCgnus.el")
(load "JCofflineimap.el")
(load "JCnotmuch.el")
(load "JCbrowser.el")
(load "JCbbdb.el")
;; (load "JCnamazu.el")
;; (load "JCmingus.el")
;; (load "JCworkgroup.el")
;; (load "JCworkgroups2.el")
;; (load "JCdesktop")
;; (load "JCwww.el")
(load "JCregexps.el")
(load "JCcalfw.el")
(load "JCcalc.el")
(load "JCace-link.el")
;; (load "JCemms.el")
(load "JCavy.el")
(load "JCpython.el")
;; (load "JClilypond.el")
(load "JCunison.el")
(load "JCeshell.el")
;; (load "JClispy.el")
(load "JCgnuplot.el")
(load "JCbindings.el")
;; (load "JCpocket.el")
;; (load "JCasymptote.el")
(load "general_stuff.el")
(load "JCdashboard.el")
(put 'list-timers 'disabled nil)

(use-package helm) ;; pour avoir helm-for-files

(use-package wgrep)

(use-package try)

(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-check)               ;; Alternative: consult-flymake
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-org-heading)           ;; Alternative: consult-org-outline
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
)

(use-package persp-mode
    :custom (persp-keymap-prefix (kbd "C-z"))
    :after (consult)
    :config
    (defvar persp-consult-source
    (list :name     "Perspective"
          :narrow   ?s
          :category 'buffer
          :state    #'consult--buffer-state
          :history  'buffer-name-history
          :default  t
          :items
          #'(lambda () (consult--buffer-query :sort 'visibility
                                              :predicate '(lambda (buf) (persp-contain-buffer-p buf))
                                              :as #'buffer-name)))
      )
    (add-to-list 'consult-buffer-sources persp-consult-source)
    (add-to-list 'ibuffer-maybe-show-predicates #'(lambda (buf) (not (persp-contain-buffer-p buf))))
    (persp-mode)
    )

(use-package vertico
    :init
  (vertico-mode)
  :bind ("M-R" . #'vertico-repeat)
  :hook (minibuffer-setup . vertico-repeat-save)
  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode)
  :after (vertico)
  (add-to-list 'savehist-additional-variables 'vertico-repeat-history))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
	completion-caterory-overrides nil
        ;; completion-category-overrides '((file (styles partial-completion)))
	;; completion-category-overrides '((file (styles . (partial-completion))))
	))

;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))

(defun find-file-in-bookmarked-directory (bookmark)
     "If BOOKMARK is a directory, run `find-file' from it."
     (interactive "sBookmarked directory: ")
     (if-let ((record (bookmark-get-bookmark bookmark))
              (filename (alist-get 'filename (cdr record)))
              ((string-suffix-p "/" filename)))
         (let ((default-directory filename))
           (call-interactively 'find-file))
       (user-error "Not a bookmarked directory")))

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings) ;; alternative for `describe-bindings'
   (:map embark-bookmark-map
	 ("/" . #'find-file-in-bookmarked-directory)))
  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))


(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file))
  :config
  (setq consult-dir-sources '(consult-dir--source-recentf consult-dir--source-bookmark consult-dir--source-default consult-dir--source-project consult-dir--source-tramp-local)))



(use-package popper
  :ensure t ; or :straight t
  :bind (("C-*"   . popper-toggle-latest)
         ("M-*"   . popper-cycle)
         ("C-M-*" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          help-mode
          compilation-mode
	  ;; dired-mode
	  special-mode
	  TeX-output-mode
	  ;; pdf-view-mode
	  ))
  (popper-mode +1)
  (popper-echo-mode +1))                ; For echo area hints

(use-package corfu
  ;; Optional customizations
  ;; :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-excluded-modes'.
  :init
  (global-corfu-mode)
  ;; :config
  ;; (setq corfu-auto t)
  )

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

(use-package fd-dired)

;; (use-package awesome-tab
;;   :load-path "/home/wilk/git-repositories/awesome-tab/"
;;   :config
;;   (awesome-tab-mode t))


(use-package consult-flyspell
  :config
  ;; default settings
  (setq consult-flyspell-select-function nil ;; voir https://gitlab.com/OlMon/consult-flyspell
        consult-flyspell-set-point-after-word t
        consult-flyspell-always-check-buffer nil))

(use-package consult-notmuch
    :config
  (add-to-list 'consult-buffer-sources 'consult-notmuch-buffer-source))


;; (use-package emms
;;   :config
;;     (require 'emms-setup)
;;     ;; (require 'emms-player-mpd)
;;     (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
;;     ;; (setq emms-player-list '(emms-player-mpv))
;;     ;; (add-to-list 'emms-info-functions 'emms-info-mpd)
;;     ;; (add-to-list 'emms-player-list 'emms-player-mpv)
;;     ;; Socket is not supported
;;     ;; (setq emms-player-mpd-server-name "localhost")
;;     ;; (setq emms-player-mpd-server-port "6600")
;;     (setq emms-source-file-default-directory "/var/lib/mpd/music/NAS/Synology/BEETS/Nas/")
;;     ;; (setq emms-player-mpd-music-directory "/var/lib/mpd/music/NAS/Synology/BEETS")
;;     ;; (emms-player-mpd-connect)
;;   )

(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  ;; Other useful Dabbrev configurations.
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))

;; Add extensions
(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p i" . cape-ispell)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )

(use-package mpdel)
(use-package mpdel-embark
  :demand t
  :after (embark mpdel)
  :config
  (progn
    (mpdel-embark-setup)))

(use-package empv
  :quelpa (empv
           :fetcher github
           :repo "isamert/empv.el")
  :config (empv-initialize-embark)
  (setq empv-mpv-args '("--no-terminal" "--idle" "--input-ipc-server=/tmp/empv-socket" "--audio-display=embedded-first")))

(use-package consult-bibtex
  :quelpa (consult-bibtex
           :fetcher github
           :repo "mohkale/consult-bibtex")
  :requires (consult embark)
  :config  (add-to-list 'embark-keymap-alist '(bibtex-completion . consult-bibtex-embark-map)))

(setq tab-bar-tab-hints t)

(use-package poke-line
    :config
  (add-hook 'latex-mode-hook 'poke-line-mode)
  (add-hook 'org-mode-hook 'poke-line-mode)
  (add-hook 'lisp-mode-hook 'poke-line-mode)
  (add-hook 'eww-mode-hook 'poke-line-mode)
  (setq poke-line-bar-length 8)
  (setq-default poke-line-pokemon "charmander"))

(put 'dired-find-alternate-file 'disabled nil)

(use-package ibuffer
    :after (persp-mode)
    :custom
  (ibuffer-show-empty-filter-groups nil)
  (ibuffer-saved-filter-groups
      '(("home"
	 ("emacs-config" (or (filename . ".emacs.d")
			     (filename . "emacs-config")))
	 ("enseignement" (filename . "enseignement"))
         ;; ("martinowen.net" (filename . "martinowen.net")
	 ("Org" (or (mode . org-mode)
		    (filename . "OrgMode")))
         ;; ("code" (filename . "code"))
	 ;; ("Web Dev" (or (mode . html-mode)
	 ;; 		(mode . css-mode)))
	 ;; ("Subversion" (name . "\*svn"))
	 ("Magit" (name . "\*magit"))
	 ("ERC" (mode . erc-mode))
	 ("Help" (or (name . "\*Help\*")
		     (name . "\*Apropos\*")
		     (name . "\*info\*"))))))
  :config
  (add-hook 'ibuffer-mode-hook 'ibuffer-auto-mode)
  (setq ibuffer-default-display-maybe-show-predicates nil)
  (add-hook 'ibuffer-mode-hook
	  #'(lambda ()
	     (ibuffer-switch-to-saved-filter-groups "home"))
	  ))
(use-package expand-region)
(use-package recursion-indicator)

(setq eudc-server-hotlist '(("localhost" . bbdb)))

(add-hook 'message-mode-hook
          (lambda ()
            (setq-local completion-at-point-functions
                        (delq 'message-completion-function
                              completion-at-point-functions))
            (add-to-list 'completion-at-point-functions
                         #'eudc-capf-complete)))
