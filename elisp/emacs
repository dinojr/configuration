;;~/.emacs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Packages ;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'package)
(package-initialize)
(setq package-archives '(("ELPA" . "http://tromey.com/elpa/")
			 ("melpa" . "http://melpa.milkbox.net/packages/")
                          ("gnu" . "http://elpa.gnu.org/packages/")
                          ("marmalade" . "http://marmalade-repo.org/packages/")
			  ("sunrise" . "http://joseito.republika.pl/sunrise-commander/")))
;; Packages end ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;--------------------
;; Customize
;;--------------------
(setq inhibit-startup-screen t)
(global-font-lock-mode)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(font-latex-math-face ((((class color) (background dark)) (:foreground "#ad7fa8"))))
 '(org-headline-done ((((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon" :strike-through t)))))

(set-face-attribute 'default nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant 'normal :weight 'normal :height 100 :width 'normal :foundry "unknown" :family "DejaVu Sans Mono")



(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(LaTeX-clean-intermediate-suffixes
   (quote
    ("\\.aux" "\\.bbl" "\\.blg" "\\.brf" "\\.fot" "\\.glo" "\\.gls" "\\.idx" "\\.ilg" "\\.ind" "\\.lof" "\\.log" "\\.lot" "\\.out" "\\.toc" "\\.url" "\\.thm" "\\.ps" "\\.dvi" "\\.tex~" "\\.nav" "\\.snm" "\\-autopp.log")))
 '(LaTeX-indent-environment-list
   (quote
    (("verbatim" current-indentation)
     ("verbatim*" current-indentation)
     ("array")
     ("displaymath")
     ("eqnarray")
     ("eqnarray*")
     ("equation")
     ("equation*")
     ("picture")
     ("tabbing")
     ("table")
     ("table*")
     ("tabular")
     ("tabular*"))))
 '(TeX-command-list
   (quote
    (("TeX" "%(PDF)%(tex) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
      (plain-tex-mode texinfo-mode ams-tex-mode)
      :help "Run plain TeX")
     ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil
      (latex-mode doctex-mode)
      :help "Run LaTeX")
     ("Makeinfo" "makeinfo %t" TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with Info output")
     ("Makeinfo HTML" "makeinfo --html %t" TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with HTML output")
     ("AmSTeX" "%(PDF)amstex %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
      (ams-tex-mode)
      :help "Run AMSTeX")
     ("ConTeXt" "texexec --once --texutil %(execopts)%t" TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt once")
     ("ConTeXt Full" "texexec %(execopts)%t" TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt until completion")
     ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t :help "Run BibTeX")
     ("View" "%V" TeX-run-discard t t :help "Run Viewer")
     ("Print" "%p" TeX-run-command t t :help "Print the file")
     ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command)
     ("File" "%(o?)dvips %d -o %f " TeX-run-command t t :help "Generate PostScript file")
     ("Index" "makeindex %s" TeX-run-command nil t :help "Create index file")
     ("Check" "lacheck %s" TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for correctness")
     ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document")
     ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files")
     ("Clean All" "(TeX-clean t)" TeX-run-function nil t :help "Delete generated intermediate and output files")
     ("rubber" "rubber --cache --inplace --maxerr -1 --short --force --warn all --pdf %t" TeX-run-command nil t :help "Run rubber with pdflatex directly")
     ("rubberps" "rubber --cache --inplace --maxerr -1 --short --force --warn all --ps --pdf %t" TeX-run-command nil t :help "Run rubber with latex->dvips->ps2pdf")
     ("pdflatex-vuibert" "pdflatex -fmt ../../../vuistand-fmt.fmt %t" TeX-run-command nil t :help "Run pdflatex with custom format file"))))
 '(canlock-password "5052bb55e61c64dae5204c0ccac4d417b05d8cf8")
 '(font-latex-fontify-sectioning (quote color))
 '(font-latex-quotes (quote french))
 '(org-archive-save-context-info (quote (itags ltags)))
 '(org-format-latex-options
   (quote
    (:foreground default :background default :scale 2.0 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
		 ("begin" "$1" "$" "$$" "\\(" "\\["))))
 '(reftex-toc-include-labels t)
 '(reftex-toc-split-windows-horizontally t)
 '(safe-local-variable-values
   (quote
    ((eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-02/physique-partie-02-chapitre-06//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-02/physique-partie-02-chapitre-05//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-02/physique-partie-02-chapitre-04//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    "/home/wilk/Bureau/:"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-02/physique-partie-02-chapitre-03//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-02/physique-partie-02-chapitre-02//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-02/physique-partie-02-chapitre-01//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-02/physique-partie-02-chapitre-02/figures//" "physique-partie-02/physique-partie-02-chapitre-02/python//"))
     (TeX-aster . "../../physique-fichier-maitre.tex")
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-02/physique-partie-02-chapitre-02/figures//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-04/physique-partie-04-chapitre-02//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-04/physique-partie-04-chapitre-05//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-04/physique-partie-04-chapitre-04//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-04/physique-partie-04-chapitre-03//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-04/physique-partie-04-chapitre-03/figures//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-02/physique-partie-02-chapitre-01/figures//"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":physique-partie-02/physique-partie-02-chapitre-01/figures/"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    ":/home/wilk/vuibert/vuibert-sup/physique-partie-02/physique-partie-02-chapitre-01/figures/"))
     (eval setenv "TEXINPUTS"
	   (concat
	    (getenv "TEXINPUTS")
	    "/home/wilk/vuibert/vuibert-sup/physique-partie-02/physique-partie-02-chapitre-01/figures/"))
     (TeX-master . "../../physique-fichier-maitre.tex"))))
 '(show-paren-mode t)
 '(sp-autoinsert-if-followed-by-same 0))

;;--------------------
;; Customize end
;;--------------------
;;(load "~/.emacs.d/emacs_server.el")
(when (daemonp)
  (require 'session-manager)
  (session-manager-init (daemonp)))
(load "~/.emacs.d/emacs_noninteractive.el")
(load "~/.emacs.d/emacs_interactive.el")


;;--------------------
;; Vestiges
;;--------------------
;; OrgContacts ;;

;; (add-to-list 'load-path "/home/wilk/info/emacs/org-mode/contrib/lisp")
;; (require 'org-contacts)
;; Pour l'instant, on reste avec googlecontacts
;; (setq org-contact-files "/home/wilk/org/orgfiles/contacts.org")
; Pour avoir gnus+yasnippet+contacts dans Emacs23, inutile dans
;; Emacs24 normalement
;; (defun set-yas/fallback-behavior ()
;;   (setq yas/fallback-behavior '(apply completion-at-point)))
;; (add-hook 'message-mode-hook 'set-yas/fallback-behavior)

;;GoogleContacts;;
;; PAssPhrase "standard du labo"
;; (add-to-list 'load-path "/home/wilk/.emacs.d/elpa/oauth2-0.1/")
;; (require 'oauth2)
;; (add-to-list 'load-path "/home/wilk/.emacs.d/google-contacts.el")
;; (require 'google-contacts)
;; (require 'google-contacts-gnus)
;; (require 'google-contacts-message)

;; BBDB stuff
;; (add-to-list 'load-path "/home/wilk/info/emacs/bbdb-2.36/lisp")
;; (add-to-list 'load-path "/home/wilk/info/emacs/bbdb-2.36/bits")
;; (add-to-list 'load-path "/home/wilk/info/emacs/bbdb/lisp")
;; (add-to-list 'load-path "/home/wilk/info/emacs/bbdb/bits")
;; (add-to-list 'Info-directory-list "~/info/emacs/bbdb/doc/")


;; pour sauver des configurations de windows, et les parcourir

;; (require 'winring)
;; ;; Note that by default, this binds the winring keymap to the C-x 7 prefix,
;; ;; but you can change this by setting the value of `winring-keymap-prefix',
;; ;; before you call `winring-initialize'.
;; (winring-initialize)
;; (setq winring-show-names t)

;; (add-to-list 'load-path "/home/wilk/.emacs.d/elpa/window-number-1.0.1/")
;; (autoload 'window-number-mode "window-number"
;;   "A global minor mode that enables selection of windows according to
;; numbers with the C-x C-j prefix.  Another mode,
;; `window-number-meta-mode' enables the use of the M- prefix."
;;   t)
;; (window-number-mode 1)

;; (autoload 'window-number-meta-mode "window-number"
;;   "A global minor mode that enables use of the M- prefix to select
;; windows, use `window-number-mode' to display the window numbers in
;; the mode-line."
;;   t)

;; (window-number-meta-mode 1)

;; (add-to-list 'load-path "/home/wilk/.emacs.d/elpa/boxquote-20081011.2126")


;; (if (not server-mode)
;;     (server-start)
;;   )
;;--------------------
;; Vestiges end
;;--------------------


